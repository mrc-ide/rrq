% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker_spawn.R
\name{rrq_worker_spawn}
\alias{rrq_worker_spawn}
\title{Spawn a worker}
\usage{
rrq_worker_spawn(
  obj,
  n = 1,
  logdir = NULL,
  timeout = 600,
  worker_config = "localhost",
  worker_id_base = NULL,
  time_poll = 1,
  progress = NULL
)
}
\arguments{
\item{obj}{An \code{rrq_controller} object}

\item{n}{Number of workers to spawn}

\item{logdir}{Path of a log directory to write the worker process
log to, interpreted relative to the current working directory}

\item{timeout}{Time to wait for workers to appear. If 0 then we
don't wait for workers to appear (you can run the \code{wait_alive}
method of the returned object to run this test manually)}

\item{worker_config}{Name of the configuration to use.  By default
the \code{"localhost"} configuration is used}

\item{worker_id_base}{Optional base to construct the worker ids
from.  If omitted a random base will be used. Actual ids will be
created but appending integers to this base.}

\item{time_poll}{Polling period (in seconds) while waiting for
workers to come up.  Must be an integer, at least 1.}

\item{progress}{Show a progress bar while waiting for workers
(when \code{timeout} is at least 0)}
}
\value{
An \code{rrq_worker_manager} object with fields:
\itemize{
\item \code{id}: the ids of the spawned workers
\item \code{wait_alive}: a method to wait for workers to come alive
\item \code{stop}: a method to stop workers
\item \code{kill}: a method to kill workers abruptly by sending a signal
\item \code{is_alive}: a method that checks if a worker is currently alive
\item \code{logs}: a method that returns logs for a single worker
}

All the methods accept a vector of worker names, or integers,
except \code{logs} which requires a single worker id (as a string or
integer). For all methods except \code{logs}, the default of \code{NULL}
means "all managed workers".
}
\description{
Spawn a worker in the background
}
\details{
Spawning multiple workers.  If \code{n} is greater than one,
multiple workers will be spawned.  This happens in parallel so it
does not take n times longer than spawning a single worker.

Beware that signals like Ctrl-C passed to \emph{this} R instance
can still propagate to the child processes and can result in them
dying unexpectedly.  It is probably safer to start processes in a
completely separate session.
}
