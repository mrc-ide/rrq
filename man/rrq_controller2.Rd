% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interface.R
\name{rrq_controller2}
\alias{rrq_controller2}
\title{Create rrq controller}
\usage{
rrq_controller2(
  queue_id,
  con = redux::hiredis,
  timeout_task_wait = NULL,
  follow = NULL
)
}
\arguments{
\item{queue_id}{An identifier for the queue.  This will prefix all
keys in redis, so a prefix might be useful here depending on
your use case (e.g. \code{rrq:<user>:<id>})}

\item{con}{A redis connection. The default tries to create a redis
connection using default ports, or environment variables set as in
\code{\link[redux:hiredis]{redux::hiredis()}}}

\item{timeout_task_wait}{An optional default timeout to use when
waiting for tasks (e.g., with \link{rrq_task_wait}, \link{rrq_tasks_wait},
etc). If not given, then we fall back on the global option
\code{rrq.timeout_task_wait}, and if that is not set, we wait forever
(i.e., \code{timeout_task_wait = Inf}).}

\item{follow}{An optional default logical to use for tasks
that may (or may not) be retried. If not given we fall back
on the global option \code{rrq.follow}, and if that is not set then
\code{TRUE} (i.e., we do follow). The value \code{follow = TRUE} is
potentially slower than \code{follow = FALSE} for some operations
because we need to dereference every task id. If you never use
\link{rrq_task_retry} then this dereference never has an effect and we
can skip it. See \code{vignette("fault-tolerance")} for more
information.}
}
\value{
An \code{rrq_controller2} object, which is opaque.
}
\description{
Create a new controller.  This is the new interface that will
replace \link{rrq_controller} soon, at which point it will rename back
to \code{rrq_controller}.
}
