% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rrq_create.R
\name{rrq_task_create_expr}
\alias{rrq_task_create_expr}
\title{Create a task based on an expression}
\usage{
rrq_task_create_expr(
  expr,
  queue = NULL,
  separate_process = FALSE,
  timeout_task_run = NULL,
  depends_on = NULL,
  controller = NULL
)
}
\arguments{
\item{expr}{The expression, does not need quoting. See Details.}

\item{queue}{The queue to add the task to; if not specified the
"default" queue (which all workers listen to) will be used. If
you have configured workers to listen to more than one queue you
can specify that here. Be warned that if you push jobs onto a
queue with no worker, it will queue forever.}

\item{separate_process}{Logical, indicating if the task should be
run in a separate process on the worker (see \verb{$enqueue} for
details).}

\item{timeout_task_run}{Optionally, a maximum allowed running
time, in seconds (see \verb{$enqueue} for details).}

\item{depends_on}{Vector or list of IDs of tasks which must have
completed before this job can be run. Once all dependent tasks
have been successfully run, this task will get added to the
queue. If the dependent task fails then this task will be
removed from the queue.}

\item{controller}{The controller to use.  If not given (or \code{NULL})
we'll use the controller registered with
\code{\link[=rrq_default_controller_set]{rrq_default_controller_set()}}.}
}
\description{
Create a task based on an expression.  The expression passed as
\code{expr} will typically be a function call (e.g., \code{f(x)}).  We will
analyse the expression and find all variables that you reference
(in the case of \code{f(x)} this is \code{x}) and combine this with the
function name to run on the worker.  If \code{x} cannot be found in
your calling environment we will error.
}
\details{
Alternatively you may provide a multiline statement by using \code{{}}
to surround multiple lines, such as:

\if{html}{\out{<div class="sourceCode">}}\preformatted{task_create_expr(\{
  x <- runif(1)
  f(x)
\}, ...)
}\if{html}{\out{</div>}}

in this case, we apply a simple heuristic to work out that \code{x} is
locally assigned and should not be saved with the expression.
}
