% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker.R
\name{rrq_worker}
\alias{rrq_worker}
\title{rrq queue worker}
\description{
rrq queue worker

rrq queue worker
}
\details{
A rrq queue worker.  These are not typically for interacting with
but will sit and poll a queue for jobs.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{The id of the worker}

\item{\code{config}}{The name of the configuration used by this worker}

\item{\code{controller}}{An rrq controller object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-rrq_worker-new}{\code{rrq_worker$new()}}
\item \href{#method-rrq_worker-info}{\code{rrq_worker$info()}}
\item \href{#method-rrq_worker-log}{\code{rrq_worker$log()}}
\item \href{#method-rrq_worker-load_envir}{\code{rrq_worker$load_envir()}}
\item \href{#method-rrq_worker-poll}{\code{rrq_worker$poll()}}
\item \href{#method-rrq_worker-step}{\code{rrq_worker$step()}}
\item \href{#method-rrq_worker-loop}{\code{rrq_worker$loop()}}
\item \href{#method-rrq_worker-format}{\code{rrq_worker$format()}}
\item \href{#method-rrq_worker-timer_start}{\code{rrq_worker$timer_start()}}
\item \href{#method-rrq_worker-progress}{\code{rrq_worker$progress()}}
\item \href{#method-rrq_worker-task_eval}{\code{rrq_worker$task_eval()}}
\item \href{#method-rrq_worker-shutdown}{\code{rrq_worker$shutdown()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-new"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-new}{}}}
\subsection{Method \code{new()}}{
Constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$new(
  queue_id,
  name_config = "localhost",
  worker_id = NULL,
  timeout_config = 0,
  is_child = FALSE,
  con = redux::hiredis()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{queue_id}}{The queue id}

\item{\code{name_config}}{Optional name of the configuration. The
default "localhost" configuration always exists. Create new
configurations using \link{rrq_worker_config_save2}.}

\item{\code{worker_id}}{Optional worker id.  If omitted, a random
id will be created.}

\item{\code{timeout_config}}{How long to try and read the worker
configuration for. Will attempt to read once a second and throw
an error if config cannot be located after \code{timeout} seconds.
Use this to create workers before their configurations are
available. The default (0) is to assume that the configuration
is immediately available.}

\item{\code{is_child}}{Logical, used to indicate that this is a child of
the real worker.  If \code{is_child} is \code{TRUE}, then most other
arguments here have no effect (e.g., \code{queue} all the timeout /
idle / polling arguments) as they come from the parent.
Not for general use.}

\item{\code{con}}{A redis connection}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-info"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-info}{}}}
\subsection{Method \code{info()}}{
Return information about this worker, a list of
key-value pairs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$info()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-log"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-log}{}}}
\subsection{Method \code{log()}}{
Create a log entry. This will print a human readable
format to screen and a machine-readable format to the redis database.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$log(label, value = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label}}{Scalar character, the title of the log entry}

\item{\code{value}}{Character vector (or null) with log values}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-load_envir"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-load_envir}{}}}
\subsection{Method \code{load_envir()}}{
Load the worker environment by creating a new
environment object and running the create hook (if configured).
See \code{\link[=rrq_worker_envir_set]{rrq_worker_envir_set()}} for details.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$load_envir()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-poll"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-poll}{}}}
\subsection{Method \code{poll()}}{
Poll for work
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$poll(immediate = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{immediate}}{Logical, indicating if we should \emph{not}
do a blocking wait on the queue but instead reducing the timeout to
zero. Intended primarily for use in the tests.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-step"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-step}{}}}
\subsection{Method \code{step()}}{
Take a single "step". This consists of
\enumerate{
\item Poll for work (\verb{$poll()})
\item If work found, run it (either a task or a message)
\item If work not found, check the timeout
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$step(immediate = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{immediate}}{Logical, indicating if we should \emph{not}
do a blocking wait on the queue but instead reducing the timeout to
zero. Intended primarily for use in the tests.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-loop"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-loop}{}}}
\subsection{Method \code{loop()}}{
The main worker loop. Use this to set up the main
worker event loop, which will continue until exiting (via a timeout
or message).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$loop(immediate = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{immediate}}{Logical, indicating if we should \emph{not}
do a blocking wait on the queue but instead reducing the timeout to
zero. Intended primarily for use in the tests.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-format"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-format}{}}}
\subsection{Method \code{format()}}{
Create a nice string representation of the worker.
Used automatically to print the worker by R6.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-timer_start"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-timer_start}{}}}
\subsection{Method \code{timer_start()}}{
Start the timer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$timer_start()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-progress"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-progress}{}}}
\subsection{Method \code{progress()}}{
Submit a progress message. See
\code{\link[=rrq_task_progress_update]{rrq_task_progress_update()}} for details of this mechanism.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$progress(value, error = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{An R object with the contents of the update. This
will overwrite any previous progress value, and can be retrieved
with \link{rrq_task_progress}.  A value of \code{NULL} will appear
to clear the status, as \code{NULL} will also be returned if no
status is found for a task.}

\item{\code{error}}{Logical, indicating if we should throw an error if
not running as an \code{rrq} task. Set this to \code{FALSE} if
you want code to work without modification within and outside of
an \code{rrq} job, or to \code{TRUE} if you want to be sure that
progress messages have made it to the server.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-task_eval"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-task_eval}{}}}
\subsection{Method \code{task_eval()}}{
Evaluate a task. When running a task on a separate
process, we will always set two environment variables:
* \code{RRQ_WORKER_ID} this is the id field
* \code{RRQ_TASK_ID} this is the task id
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$task_eval(task_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task_id}}{A task identifier. It is undefined what happens if
this identifier does not exist.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rrq_worker-shutdown"></a>}}
\if{latex}{\out{\hypertarget{method-rrq_worker-shutdown}{}}}
\subsection{Method \code{shutdown()}}{
Stop the worker
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rrq_worker$shutdown(status = "OK", graceful = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{the worker status; typically be one of \code{OK} or \code{ERROR}
but can be any string}

\item{\code{graceful}}{Logical, indicating if we should request a
graceful shutdown of the heartbeat, if running.}
}
\if{html}{\out{</div>}}
}
}
}
