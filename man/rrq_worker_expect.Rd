% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker_spawn.R
\name{rrq_worker_expect}
\alias{rrq_worker_expect}
\alias{rrq_worker_expect2}
\alias{rrq_worker_wait}
\alias{rrq_worker_wait2}
\title{Register expected workers}
\usage{
rrq_worker_expect(obj, worker_ids)

rrq_worker_expect2(worker_ids, controller = NULL)

rrq_worker_wait(obj, key_alive, timeout = Inf, poll = 1, progress = NULL)

rrq_worker_wait2(
  key_alive,
  timeout = Inf,
  poll = 1,
  progress = NULL,
  controller = NULL
)
}
\arguments{
\item{obj}{A rrq_controller object}

\item{worker_ids}{Ids of expected workers}

\item{key_alive}{A key as returned by \code{rrq_worker_expect}}

\item{timeout}{Number of seconds to wait for workers to appear. If
they have not appeared by this time, we throw an error.}

\item{poll}{Poll interval, in seconds. Must be an integer}

\item{progress}{Optional logical indicating if a progress bar
should be displayed. If \code{NULL} we fall back on the value of the
global option \code{rrq.progress}, and if that is unset display a
progress bar if in an interactive session.}
}
\value{
\itemize{
\item For \code{rrq_worker_expect}: A string, which can be passed through
as the second argument to \code{rrq_worker_wait} in order to block
until workers are available.
\item For \code{rrq_worker_wait}: Invisibly a difftime object with the time
spent waiting.
}
}
\description{
Register that workers are expected.  This generates a key that one
or more workers will write to when they start up (as used by
\code{rrq_worker_spawn}).
}
\details{
The general pattern here is that the process that submits the
worker (so the parent process, or the user submitting a cluster
job) would run this function to register that some number of
workers will be started at some point in the future.  In the case
of starting workers by submitting them to a cluster, this could
take a long time as the job queues, or if starting by running
another process it could be very quick.  Information about the
workers that are expected and where to find them is stored against
a key, which is returned by \code{rrq_worker_expect}.

Then, to wait on a set of workers, you run \code{rrq_worker_wait}
}
