% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rrq_message.R
\name{rrq_message_send_and_wait}
\alias{rrq_message_send_and_wait}
\title{Send a message and wait for response}
\usage{
rrq_message_send_and_wait(
  command,
  args = NULL,
  worker_ids = NULL,
  named = TRUE,
  delete = TRUE,
  timeout = 600,
  time_poll = 0.05,
  progress = NULL,
  controller = NULL
)
}
\arguments{
\item{command}{A command, such as \code{PING}, \code{PAUSE}; see the Messages
section of the Details for al messages.}

\item{args}{Arguments to the command, if supported}

\item{worker_ids}{Optional vector of worker ids to send the message
to. If \code{NULL} then the message will be sent to all active workers.}

\item{named}{Logical, indicating if the return value should be
named by worker id.}

\item{delete}{Logical, indicating if messages should be deleted
after retrieval}

\item{timeout}{Integer, representing seconds to wait until the
response has been received. An error will be thrown if a
response has not been received in this time.}

\item{time_poll}{If \code{timeout} is greater than zero, this is the
polling interval used between redis calls.  Increasing this
reduces network load but increases the time that may be waited
for.}

\item{progress}{Optional logical indicating if a progress bar
should be displayed. If \code{NULL} we fall back on the value of the
global option \code{rrq.progress}, and if that is unset display a
progress bar if in an interactive session.}

\item{controller}{The controller to use.  If not given (or \code{NULL})
we'll use the controller registered with
\code{\link[=rrq_default_controller_set]{rrq_default_controller_set()}}.}
}
\value{
The message response
}
\description{
Send a message and wait for responses.  This is a helper function
around \code{\link[=rrq_message_send]{rrq_message_send()}} and \code{\link[=rrq_message_get_response]{rrq_message_get_response()}}.
}
\examples{
\dontshow{if (rrq:::enable_examples(require_queue = "rrq:example")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
obj <- rrq_controller("rrq:example")
rrq_message_send_and_wait("PING", controller = obj)
\dontshow{\}) # examplesIf}
}
